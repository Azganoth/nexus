generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String
  name               String              @db.VarChar(60)
  role               Role                @default(USER)
  profile            Profile?
  refreshTokens      RefreshToken[]
  passwordResetToken PasswordResetToken?
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")

  @@map("users")
}

model Profile {
  id             String   @id @default(uuid())
  userId         String   @unique @map("user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  username       String   @unique @db.VarChar(40)
  displayName    String   @map("display_name") @db.VarChar(60)
  avatarUrl      String   @map("avatar_url")
  bio            String?  @db.VarChar(255)
  seoTitle       String?  @map("seo_title") @db.VarChar(60)
  seoDescription String?  @map("seo_description") @db.VarChar(255)
  links          Link[]
  isPublic       Boolean  @default(true) @map("is_public")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

model Link {
  id           Int      @id @default(autoincrement())
  profileId    String   @map("profile_id")
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  title        String   @db.VarChar(60)
  url          String
  displayOrder Int      @map("display_order")
  isPublic     Boolean  @default(true) @map("is_public")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([profileId, displayOrder])
  @@map("links")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("refresh_tokens")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}
